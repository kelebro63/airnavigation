package com.example.airnavigate.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.airnavigate.Dao.VotingResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VOTING_RESULT".
*/
public class VotingResultDao extends AbstractDao<VotingResult, Long> {

    public static final String TABLENAME = "VOTING_RESULT";

    /**
     * Properties of entity VotingResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TotalCount = new Property(1, String.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property Page = new Property(2, String.class, "page", false, "PAGE");
        public final static Property PageSize = new Property(3, String.class, "pageSize", false, "PAGE_SIZE");
        public final static Property Wording = new Property(4, String.class, "wording", false, "WORDING");
    };

    private DaoSession daoSession;


    public VotingResultDao(DaoConfig config) {
        super(config);
    }
    
    public VotingResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VOTING_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TOTAL_COUNT\" TEXT," + // 1: totalCount
                "\"PAGE\" TEXT," + // 2: page
                "\"PAGE_SIZE\" TEXT," + // 3: pageSize
                "\"WORDING\" TEXT);"); // 4: wording
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VOTING_RESULT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VotingResult entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(2, totalCount);
        }
 
        String page = entity.getPage();
        if (page != null) {
            stmt.bindString(3, page);
        }
 
        String pageSize = entity.getPageSize();
        if (pageSize != null) {
            stmt.bindString(4, pageSize);
        }
 
        String wording = entity.getWording();
        if (wording != null) {
            stmt.bindString(5, wording);
        }
    }

    @Override
    protected void attachEntity(VotingResult entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VotingResult readEntity(Cursor cursor, int offset) {
        VotingResult entity = new VotingResult( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalCount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // page
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pageSize
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // wording
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VotingResult entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTotalCount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPageSize(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWording(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VotingResult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VotingResult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
