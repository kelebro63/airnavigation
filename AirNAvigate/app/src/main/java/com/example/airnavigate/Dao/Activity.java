package com.example.airnavigate.Dao;

import com.example.airnavigate.Dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ACTIVITIES".
 */
public class Activity {

    private String name;
    private String subdivisionNameGenitive;
    private Integer subdivisionId;
    private long activityId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActivityDao myDao;

    private Deputy deputy;
    private Long deputy__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Activity() {
    }

    public Activity(String name, String subdivisionNameGenitive, Integer subdivisionId, long activityId) {
        this.name = name;
        this.subdivisionNameGenitive = subdivisionNameGenitive;
        this.subdivisionId = subdivisionId;
        this.activityId = activityId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActivityDao() : null;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSubdivisionNameGenitive() {
        return subdivisionNameGenitive;
    }

    public void setSubdivisionNameGenitive(String subdivisionNameGenitive) {
        this.subdivisionNameGenitive = subdivisionNameGenitive;
    }

    public Integer getSubdivisionId() {
        return subdivisionId;
    }

    public void setSubdivisionId(Integer subdivisionId) {
        this.subdivisionId = subdivisionId;
    }

    public long getActivityId() {
        return activityId;
    }

    public void setActivityId(long activityId) {
        this.activityId = activityId;
    }

    /** To-one relationship, resolved on first access. */
    public Deputy getDeputy() {
        long __key = this.activityId;
        if (deputy__resolvedKey == null || !deputy__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeputyDao targetDao = daoSession.getDeputyDao();
            Deputy deputyNew = targetDao.load(__key);
            synchronized (this) {
                deputy = deputyNew;
            	deputy__resolvedKey = __key;
            }
        }
        return deputy;
    }

    public void setDeputy(Deputy deputy) {
        if (deputy == null) {
            throw new DaoException("To-one property 'activityId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.deputy = deputy;
            activityId = deputy.getId();
            deputy__resolvedKey = activityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
