package com.example.airnavigate.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.airnavigate.Dao.Deputy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPUTY".
*/
public class DeputyDao extends AbstractDao<Deputy, Long> {

    public static final String TABLENAME = "DEPUTY";

    /**
     * Properties of entity Deputy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Family = new Property(2, String.class, "family", false, "FAMILY");
        public final static Property Patronymic = new Property(3, String.class, "patronymic", false, "PATRONYMIC");
        public final static Property Birthdate = new Property(4, String.class, "birthdate", false, "BIRTHDATE");
        public final static Property CredentialsStart = new Property(5, String.class, "credentialsStart", false, "CREDENTIALS_START");
        public final static Property CredentialsEnd = new Property(6, String.class, "credentialsEnd", false, "CREDENTIALS_END");
        public final static Property FactionId = new Property(7, String.class, "factionId", false, "FACTION_ID");
        public final static Property FactionName = new Property(8, String.class, "factionName", false, "FACTION_NAME");
        public final static Property FactionRole = new Property(9, String.class, "factionRole", false, "FACTION_ROLE");
        public final static Property PartyNameInstr = new Property(10, String.class, "partyNameInstr", false, "PARTY_NAME_INSTR");
        public final static Property IsActual = new Property(11, boolean.class, "isActual", false, "IS_ACTUAL");
        public final static Property HomePage = new Property(12, String.class, "homePage", false, "HOME_PAGE");
        public final static Property FactionRegion = new Property(13, String.class, "factionRegion", false, "FACTION_REGION");
        public final static Property NameGenitive = new Property(14, String.class, "nameGenitive", false, "NAME_GENITIVE");
        public final static Property FamilyAndInitials = new Property(15, String.class, "familyAndInitials", false, "FAMILY_AND_INITIALS");
        public final static Property VoteLink = new Property(16, String.class, "voteLink", false, "VOTE_LINK");
        public final static Property TranscriptLink = new Property(17, String.class, "transcriptLink", false, "TRANSCRIPT_LINK");
        public final static Property Lawcount = new Property(18, Integer.class, "lawcount", false, "LAWCOUNT");
        public final static Property SpeachCount = new Property(19, Integer.class, "speachCount", false, "SPEACH_COUNT");
    };


    public DeputyDao(DaoConfig config) {
        super(config);
    }
    
    public DeputyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPUTY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"FAMILY\" TEXT," + // 2: family
                "\"PATRONYMIC\" TEXT," + // 3: patronymic
                "\"BIRTHDATE\" TEXT," + // 4: birthdate
                "\"CREDENTIALS_START\" TEXT," + // 5: credentialsStart
                "\"CREDENTIALS_END\" TEXT," + // 6: credentialsEnd
                "\"FACTION_ID\" TEXT," + // 7: factionId
                "\"FACTION_NAME\" TEXT," + // 8: factionName
                "\"FACTION_ROLE\" TEXT," + // 9: factionRole
                "\"PARTY_NAME_INSTR\" TEXT," + // 10: partyNameInstr
                "\"IS_ACTUAL\" INTEGER NOT NULL ," + // 11: isActual
                "\"HOME_PAGE\" TEXT," + // 12: homePage
                "\"FACTION_REGION\" TEXT," + // 13: factionRegion
                "\"NAME_GENITIVE\" TEXT," + // 14: nameGenitive
                "\"FAMILY_AND_INITIALS\" TEXT," + // 15: familyAndInitials
                "\"VOTE_LINK\" TEXT," + // 16: voteLink
                "\"TRANSCRIPT_LINK\" TEXT," + // 17: transcriptLink
                "\"LAWCOUNT\" INTEGER," + // 18: lawcount
                "\"SPEACH_COUNT\" INTEGER);"); // 19: speachCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPUTY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Deputy entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(3, family);
        }
 
        String patronymic = entity.getPatronymic();
        if (patronymic != null) {
            stmt.bindString(4, patronymic);
        }
 
        String birthdate = entity.getBirthdate();
        if (birthdate != null) {
            stmt.bindString(5, birthdate);
        }
 
        String credentialsStart = entity.getCredentialsStart();
        if (credentialsStart != null) {
            stmt.bindString(6, credentialsStart);
        }
 
        String credentialsEnd = entity.getCredentialsEnd();
        if (credentialsEnd != null) {
            stmt.bindString(7, credentialsEnd);
        }
 
        String factionId = entity.getFactionId();
        if (factionId != null) {
            stmt.bindString(8, factionId);
        }
 
        String factionName = entity.getFactionName();
        if (factionName != null) {
            stmt.bindString(9, factionName);
        }
 
        String factionRole = entity.getFactionRole();
        if (factionRole != null) {
            stmt.bindString(10, factionRole);
        }
 
        String partyNameInstr = entity.getPartyNameInstr();
        if (partyNameInstr != null) {
            stmt.bindString(11, partyNameInstr);
        }
        stmt.bindLong(12, entity.getIsActual() ? 1L: 0L);
 
        String homePage = entity.getHomePage();
        if (homePage != null) {
            stmt.bindString(13, homePage);
        }
 
        String factionRegion = entity.getFactionRegion();
        if (factionRegion != null) {
            stmt.bindString(14, factionRegion);
        }
 
        String nameGenitive = entity.getNameGenitive();
        if (nameGenitive != null) {
            stmt.bindString(15, nameGenitive);
        }
 
        String familyAndInitials = entity.getFamilyAndInitials();
        if (familyAndInitials != null) {
            stmt.bindString(16, familyAndInitials);
        }
 
        String voteLink = entity.getVoteLink();
        if (voteLink != null) {
            stmt.bindString(17, voteLink);
        }
 
        String transcriptLink = entity.getTranscriptLink();
        if (transcriptLink != null) {
            stmt.bindString(18, transcriptLink);
        }
 
        Integer lawcount = entity.getLawcount();
        if (lawcount != null) {
            stmt.bindLong(19, lawcount);
        }
 
        Integer speachCount = entity.getSpeachCount();
        if (speachCount != null) {
            stmt.bindLong(20, speachCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Deputy readEntity(Cursor cursor, int offset) {
        Deputy entity = new Deputy( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // family
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // patronymic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // credentialsStart
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // credentialsEnd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // factionId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // factionName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // factionRole
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // partyNameInstr
            cursor.getShort(offset + 11) != 0, // isActual
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // homePage
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // factionRegion
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // nameGenitive
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // familyAndInitials
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // voteLink
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // transcriptLink
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // lawcount
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // speachCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Deputy entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFamily(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPatronymic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCredentialsStart(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCredentialsEnd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFactionId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFactionName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFactionRole(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPartyNameInstr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsActual(cursor.getShort(offset + 11) != 0);
        entity.setHomePage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFactionRegion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNameGenitive(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFamilyAndInitials(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVoteLink(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTranscriptLink(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLawcount(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setSpeachCount(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Deputy entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Deputy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
