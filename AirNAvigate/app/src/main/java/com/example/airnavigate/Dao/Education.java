package com.example.airnavigate.Dao;

import com.example.airnavigate.Dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "EDUCATIONS".
 */
public class Education {

    private String institution;
    private String year;
    private long educationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EducationDao myDao;

    private Deputy deputy;
    private Long deputy__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Education() {
    }

    public Education(String institution, String year, long educationId) {
        this.institution = institution;
        this.year = year;
        this.educationId = educationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEducationDao() : null;
    }

    public String getInstitution() {
        return institution;
    }

    public void setInstitution(String institution) {
        this.institution = institution;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public long getEducationId() {
        return educationId;
    }

    public void setEducationId(long educationId) {
        this.educationId = educationId;
    }

    /** To-one relationship, resolved on first access. */
    public Deputy getDeputy() {
        long __key = this.educationId;
        if (deputy__resolvedKey == null || !deputy__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DeputyDao targetDao = daoSession.getDeputyDao();
            Deputy deputyNew = targetDao.load(__key);
            synchronized (this) {
                deputy = deputyNew;
            	deputy__resolvedKey = __key;
            }
        }
        return deputy;
    }

    public void setDeputy(Deputy deputy) {
        if (deputy == null) {
            throw new DaoException("To-one property 'educationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.deputy = deputy;
            educationId = deputy.getId();
            deputy__resolvedKey = educationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
