package com.example.airnavigate.Dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.airnavigate.Dao.Activity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVITIES".
*/
public class ActivityDao extends AbstractDao<Activity, Void> {

    public static final String TABLENAME = "ACTIVITIES";

    /**
     * Properties of entity Activity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property SubdivisionNameGenitive = new Property(1, String.class, "subdivisionNameGenitive", false, "SUBDIVISION_NAME_GENITIVE");
        public final static Property SubdivisionId = new Property(2, Integer.class, "subdivisionId", false, "SUBDIVISION_ID");
        public final static Property ActivityId = new Property(3, long.class, "activityId", false, "ACTIVITY_ID");
    };

    private DaoSession daoSession;


    public ActivityDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVITIES\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"SUBDIVISION_NAME_GENITIVE\" TEXT," + // 1: subdivisionNameGenitive
                "\"SUBDIVISION_ID\" INTEGER," + // 2: subdivisionId
                "\"ACTIVITY_ID\" INTEGER NOT NULL );"); // 3: activityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVITIES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String subdivisionNameGenitive = entity.getSubdivisionNameGenitive();
        if (subdivisionNameGenitive != null) {
            stmt.bindString(2, subdivisionNameGenitive);
        }
 
        Integer subdivisionId = entity.getSubdivisionId();
        if (subdivisionId != null) {
            stmt.bindLong(3, subdivisionId);
        }
        stmt.bindLong(4, entity.getActivityId());
    }

    @Override
    protected void attachEntity(Activity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Activity readEntity(Cursor cursor, int offset) {
        Activity entity = new Activity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subdivisionNameGenitive
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // subdivisionId
            cursor.getLong(offset + 3) // activityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Activity entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubdivisionNameGenitive(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubdivisionId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setActivityId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Activity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Activity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDeputyDao().getAllColumns());
            builder.append(" FROM ACTIVITIES T");
            builder.append(" LEFT JOIN DEPUTY T0 ON T.\"ACTIVITY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Activity loadCurrentDeep(Cursor cursor, boolean lock) {
        Activity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Deputy deputy = loadCurrentOther(daoSession.getDeputyDao(), cursor, offset);
         if(deputy != null) {
            entity.setDeputy(deputy);
        }

        return entity;    
    }

    public Activity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Activity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Activity> list = new ArrayList<Activity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Activity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Activity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
