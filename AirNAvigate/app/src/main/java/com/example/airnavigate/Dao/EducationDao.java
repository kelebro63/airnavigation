package com.example.airnavigate.Dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.airnavigate.Dao.Education;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EDUCATION".
*/
public class EducationDao extends AbstractDao<Education, Void> {

    public static final String TABLENAME = "EDUCATION";

    /**
     * Properties of entity Education.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Institution = new Property(0, String.class, "institution", false, "INSTITUTION");
        public final static Property Year = new Property(1, String.class, "year", false, "YEAR");
        public final static Property DeputyId = new Property(2, long.class, "deputyId", false, "DEPUTY_ID");
    };

    private Query<Education> deputy_EducationsQuery;

    public EducationDao(DaoConfig config) {
        super(config);
    }
    
    public EducationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EDUCATION\" (" + //
                "\"INSTITUTION\" TEXT," + // 0: institution
                "\"YEAR\" TEXT," + // 1: year
                "\"DEPUTY_ID\" INTEGER NOT NULL );"); // 2: deputyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EDUCATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Education entity) {
        stmt.clearBindings();
 
        String institution = entity.getInstitution();
        if (institution != null) {
            stmt.bindString(1, institution);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(2, year);
        }
        stmt.bindLong(3, entity.getDeputyId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Education readEntity(Cursor cursor, int offset) {
        Education entity = new Education( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // institution
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // year
            cursor.getLong(offset + 2) // deputyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Education entity, int offset) {
        entity.setInstitution(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setYear(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeputyId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Education entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Education entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "educations" to-many relationship of Deputy. */
    public List<Education> _queryDeputy_Educations(long deputyId) {
        synchronized (this) {
            if (deputy_EducationsQuery == null) {
                QueryBuilder<Education> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DeputyId.eq(null));
                deputy_EducationsQuery = queryBuilder.build();
            }
        }
        Query<Education> query = deputy_EducationsQuery.forCurrentThread();
        query.setParameter(0, deputyId);
        return query.list();
    }

}
